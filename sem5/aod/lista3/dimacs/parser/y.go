// Code generated by goyacc -p Yy parser.y. DO NOT EDIT.

//line parser.y:2
    
package parser
import __yyfmt__ "fmt"
//line parser.y:3
		
import (
    "fmt"
    "dijkstra/graph"
    "strconv"
)

var result []interface{}
var problemGraph graph.Graph{}

func (y YySymType) ChangeStr(str string) {
    y.str = str
}

//line parser.y:19
type YySymType struct {
	yys int
    str    string
    number int
}

const PROBLEM = 57346
const ARC = 57347
const PROBLEM_TYPE = 57348
const NUMBER = 57349
const EOL = 57350

var YyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"PROBLEM",
	"ARC",
	"PROBLEM_TYPE",
	"NUMBER",
	"EOL",
}

var YyStatenames = [...]string{
}

const YyEofCode = 1
const YyErrCode = 2
const YyInitialStackSize = 16

//line parser.y:65


func yyError(str string) {
    fmt.Println("Error:", str)
}

//line yacctab:1
var YyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const YyPrivate = 57344

const YyLast = 13

var YyAct = [...]int{
	7, 13, 12, 11, 10, 9, 8, 5, 6, 1,
	2, 4, 3,
}

var YyPact = [...]int{
	-1000, 3, -8, -1000, -1000, 0, -2, -1000, -3, -4,
	-5, -6, -1000, -1000,
}

var YyPgo = [...]int{
	0, 12, 11, 10, 9,
}

var YyR1 = [...]int{
	0, 4, 4, 3, 3, 1, 2,
}

var YyR2 = [...]int{
	0, 0, 3, 1, 1, 4, 4,
}

var YyChk = [...]int{
	-1000, -4, -3, -1, -2, 4, 5, 8, 6, 7,
	7, 7, 7, 7,
}

var YyDef = [...]int{
	1, -2, 0, 3, 4, 0, 0, 2, 0, 0,
	0, 0, 5, 6,
}

var YyTok1 = [...]int{
	1,
}

var YyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8,
}

var YyTok3 = [...]int{
	0,
}

var YyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{
}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	YyDebug        = 0
	YyErrorVerbose = false
)

type YyLexer interface {
	Lex(lval *YySymType) int
	Error(s string)
}

type YyParser interface {
	Parse(YyLexer) int
	Lookahead() int
}

type YyParserImpl struct {
	lval  YySymType
	stack [YyInitialStackSize]YySymType
	char  int
}

func (p *YyParserImpl) Lookahead() int {
	return p.char
}

func YyNewParser() YyParser {
	return &YyParserImpl{}
}

const YyFlag = -1000

func YyTokname(c int) string {
	if c >= 1 && c-1 < len(YyToknames) {
		if YyToknames[c-1] != "" {
			return YyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func YyStatname(s int) string {
	if s >= 0 && s < len(YyStatenames) {
		if YyStatenames[s] != "" {
			return YyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func YyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !YyErrorVerbose {
		return "syntax error"
	}

	for _, e := range YyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + YyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := YyPact[state]
	for tok := TOKSTART; tok-1 < len(YyToknames); tok++ {
		if n := base + tok; n >= 0 && n < YyLast && YyChk[YyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if YyDef[state] == -2 {
		i := 0
		for YyExca[i] != -1 || YyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; YyExca[i] >= 0; i += 2 {
			tok := YyExca[i]
			if tok < TOKSTART || YyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if YyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += YyTokname(tok)
	}
	return res
}

func Yylex1(lex YyLexer, lval *YySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = YyTok1[0]
		goto out
	}
	if char < len(YyTok1) {
		token = YyTok1[char]
		goto out
	}
	if char >= YyPrivate {
		if char < YyPrivate+len(YyTok2) {
			token = YyTok2[char-YyPrivate]
			goto out
		}
	}
	for i := 0; i < len(YyTok3); i += 2 {
		token = YyTok3[i+0]
		if token == char {
			token = YyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = YyTok2[1] /* unknown char */
	}
	if YyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", YyTokname(token), uint(char))
	}
	return char, token
}

func YyParse(Yylex YyLexer) int {
	return YyNewParser().Parse(Yylex)
}

func (Yyrcvr *YyParserImpl) Parse(Yylex YyLexer) int {
	var Yyn int
	var YyVAL YySymType
	var YyDollar []YySymType
	_ = YyDollar // silence set and not used
	YyS := Yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Yystate := 0
	Yyrcvr.char = -1
	Yytoken := -1 // Yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Yystate = -1
		Yyrcvr.char = -1
		Yytoken = -1
	}()
	Yyp := -1
	goto Yystack

ret0:
	return 0

ret1:
	return 1

Yystack:
	/* put a state and value onto the stack */
	if YyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", YyTokname(Yytoken), YyStatname(Yystate))
	}

	Yyp++
	if Yyp >= len(YyS) {
		nyys := make([]YySymType, len(YyS)*2)
		copy(nyys, YyS)
		YyS = nyys
	}
	YyS[Yyp] = YyVAL
	YyS[Yyp].yys = Yystate

Yynewstate:
	Yyn = YyPact[Yystate]
	if Yyn <= YyFlag {
		goto Yydefault /* simple state */
	}
	if Yyrcvr.char < 0 {
		Yyrcvr.char, Yytoken = Yylex1(Yylex, &Yyrcvr.lval)
	}
	Yyn += Yytoken
	if Yyn < 0 || Yyn >= YyLast {
		goto Yydefault
	}
	Yyn = YyAct[Yyn]
	if YyChk[Yyn] == Yytoken { /* valid shift */
		Yyrcvr.char = -1
		Yytoken = -1
		YyVAL = Yyrcvr.lval
		Yystate = Yyn
		if Errflag > 0 {
			Errflag--
		}
		goto Yystack
	}

Yydefault:
	/* default state action */
	Yyn = YyDef[Yystate]
	if Yyn == -2 {
		if Yyrcvr.char < 0 {
			Yyrcvr.char, Yytoken = Yylex1(Yylex, &Yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if YyExca[xi+0] == -1 && YyExca[xi+1] == Yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Yyn = YyExca[xi+0]
			if Yyn < 0 || Yyn == Yytoken {
				break
			}
		}
		Yyn = YyExca[xi+1]
		if Yyn < 0 {
			goto ret0
		}
	}
	if Yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Yylex.Error(YyErrorMessage(Yystate, Yytoken))
			Nerrs++
			if YyDebug >= 1 {
				__yyfmt__.Printf("%s", YyStatname(Yystate))
				__yyfmt__.Printf(" saw %s\n", YyTokname(Yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Yyp >= 0 {
				Yyn = YyPact[YyS[Yyp].yys] + YyErrCode
				if Yyn >= 0 && Yyn < YyLast {
					Yystate = YyAct[Yyn] /* simulate a shift of "error" */
					if YyChk[Yystate] == YyErrCode {
						goto Yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if YyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", YyS[Yyp].yys)
				}
				Yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if YyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", YyTokname(Yytoken))
			}
			if Yytoken == YyEofCode {
				goto ret1
			}
			Yyrcvr.char = -1
			Yytoken = -1
			goto Yynewstate /* try again in the same state */
		}
	}

	/* reduction by production Yyn */
	if YyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Yyn, YyStatname(Yystate))
	}

	Yynt := Yyn
	Yypt := Yyp
	_ = Yypt // guard against "declared and not used"

	Yyp -= YyR2[Yyn]
	// Yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if Yyp+1 >= len(YyS) {
		nyys := make([]YySymType, len(YyS)*2)
		copy(nyys, YyS)
		YyS = nyys
	}
	YyVAL = YyS[Yyp+1]

	/* consult goto table to find next state */
	Yyn = YyR1[Yyn]
	Yyg := YyPgo[Yyn]
	Yyj := Yyg + YyS[Yyp].yys + 1

	if Yyj >= YyLast {
		Yystate = YyAct[Yyg]
	} else {
		Yystate = YyAct[Yyj]
		if YyChk[Yystate] != -Yyn {
			Yystate = YyAct[Yyg]
		}
	}
	// dummy call; replaced with literal code
	switch Yynt {

	case 5:
		YyDollar = YyS[Yypt-4:Yypt+1]
//line parser.y:48
		{
	        size, _ := strconv.Atoi(YyDollar[3].str)
	        problemGraph = graph.NewGraph(size)
	        fmt.Printf("Problem: Type=%s, Wierzchołki=%d, Łuki=%d\n", YyDollar[2].str, YyDollar[3].str, YyDollar[4].str)
	    }
	case 6:
		YyDollar = YyS[Yypt-4:Yypt+1]
//line parser.y:56
		{
	        from, _ := strconv.Atoi(YyDollar[2].str)
	        to, _ := strconv.Atoi(YyDollar[3].str)
	        cost, _ := strconv.Atoi(YyDollar[4].str)
	        problemGraph.AddEdge(from, to, cost)
	        fmt.Printf("Arc: From=%d, To=%d, Cost=%d\n", YyDollar[2].str, YyDollar[3].str, YyDollar[4].str)
	    }
	}
	goto Yystack /* stack new state and value */
}
